services:
  clients.api:
    image: clients.api
    restart: always
    build:
      context: .
      dockerfile: src/Clients.Api/Dockerfile
    environment:
        ConnectionStrings__ClientsDb: Host=clients.db;Port=5432;Database=ClientsDb;Username=postgres;Password=postgres
        ConnectionStrings__ClientsCache: clients.cache:6379
        ConnectionStrings__RabbitMq: amqp://guest:guest@rabbitmq:5672/
        RiskEvaluator__Url: http://risk.evaluator.service:8080
        Feature__PublishEventFailure: false
        OTEL_DOTNET_AUTO_HOME: /otel-dotnet-auto
        OTEL_SERVICE_NAME: "Clients.Api"
        OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector:4318"
    ports:  
      - "8080:8080"
    depends_on:
      - clients.db
      - rabbitmq
      - clients.cache
      - risk.evaluator.service
  clients.db:
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ClientsDb
    ports:  
      - "5432:5432"
  clients.cache:
    image: redis
    ports:
      - "6379:6379"      
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
  accounts.service:
    image: accounts.service
    build:
      context: .
      dockerfile: src/Accounts/Dockerfile
    restart: always
    environment:
        ConnectionStrings__AccountsDb: Host=accounts.db;Port=5432;Database=AccountsDb;Username=postgres;Password=postgres
        ConnectionStrings__RabbitMq: amqp://guest:guest@rabbitmq:5672/
    ports:
      - "8081:8080"
    depends_on:
      - accounts.db
      - rabbitmq
  accounts.db:
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: AccountsDb
    ports:  
      - "5433:5432"
  notifications.service:
    image: notifications.service
    restart: always
    build:
      context: .
      dockerfile: src/Notifications/Dockerfile
    environment:
        ConnectionStrings__RabbitMq: amqp://guest:guest@rabbitmq:5672/
    ports:
      - "8085:8080"
    depends_on:
      - rabbitmq
  risk.evaluator.service:
    image: risk.evaluator.service
    restart: always
    build:
      context: .
      dockerfile: src/RiskEvaluator/Dockerfile
    environment:
      Feature__PremiumMembershipFailure: false
    ports:
      - "8083:8080"
  reporting.service:
    image: reporting.service
    restart: always
    build:
      context: .
      dockerfile: src/Reporting/Dockerfile
    environment:
        ConnectionStrings__RabbitMq: amqp://guest:guest@rabbitmq:5672/
    ports:
      - "8084:8080"
    depends_on:
      - rabbitmq
        
        
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.88.0
    volumes:
      - ./otel-config.yaml:/etc/otel/config.yaml
      - ./log:/log/otel
    command: --config /etc/otel/config.yaml
    environment:
      JAEGER_ENDPOINT: "jaeger:4317"
      LOKI_ENDPOINT: "http://loki:3100/loki/api/v1/push"
    ports:
      - "8889:8889"   # Prometheus metrics exporter (scrape endpoint)
      - "13133:13133" # health_check extension
      - "55679:55679" # ZPages extension
    depends_on:
      - jaeger
      - prometheus
      - loki

  jaeger:
    image: jaegertracing/all-in-one:1.50.0
    ports:
      - "16686:16686" # Jaeger Web UI

  prometheus:
    image: prom/prometheus:v2.42.0
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"

  loki:
    image: grafana/loki:2.7.4
    ports:
      - "3100:3100"

  grafana:
    image: grafana/grafana:9.4.3
    volumes:
      - ./grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
    environment:
      GF_AUTH_ANONYMOUS_ENABLED: "true"
      GF_AUTH_ANONYMOUS_ORG_ROLE: "Admin"
    ports:
      - "3000:3000"